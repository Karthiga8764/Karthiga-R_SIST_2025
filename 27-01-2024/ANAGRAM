#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'anagram' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as a parameter.
 */

int anagram(string s) {
    int n = s.length();

    // If the length of the string is odd, it cannot be split into two equal parts
    if (n % 2 != 0) {
        return -1;
    }

    // Split the string into two parts
    string s1 = s.substr(0, n / 2);
    string s2 = s.substr(n / 2);

    // Count the occurrences of each character in both substrings
    vector<int> count(26, 0);
    
    for (char c : s1) {
        count[c - 'a']++;
    }
    
    for (char c : s2) {
        count[c - 'a']--;
    }

    // Calculate the total number of changes needed
    int changes = 0;
    
    for (int i : count) {
        changes += abs(i);
    }

    // The minimum number of changes needed to make the substrings anagrams
    return changes / 2;
}

int main() {
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = anagram(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
